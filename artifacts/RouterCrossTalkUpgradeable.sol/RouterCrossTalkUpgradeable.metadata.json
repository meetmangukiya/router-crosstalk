{
  "compiler": {
    "version": "0.8.14+commit.80d49f37"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "sourceChain",
            "type": "uint8"
          },
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "destChain",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "sourceAddress",
            "type": "address"
          }
        ],
        "name": "CrossTalkReceive",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "sourceChain",
            "type": "uint8"
          },
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "destChain",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "sourceAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "destinationAddress",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "_selector",
            "type": "bytes4"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "_hash",
            "type": "bytes32"
          }
        ],
        "name": "CrossTalkSend",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint8",
            "name": "version",
            "type": "uint8"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "ChainID",
            "type": "uint8"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "linkedContract",
            "type": "address"
          }
        ],
        "name": "Linkevent",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "ChainID",
            "type": "uint8"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "linkedContract",
            "type": "address"
          }
        ],
        "name": "Unlinkevent",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "_chainID",
            "type": "uint8"
          },
          {
            "internalType": "address",
            "name": "_linkedContract",
            "type": "address"
          }
        ],
        "name": "Link",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "_chainID",
            "type": "uint8"
          }
        ],
        "name": "Unlink",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "hash",
            "type": "bytes32"
          }
        ],
        "name": "fetchExecutes",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint8",
                "name": "chainID",
                "type": "uint8"
              },
              {
                "internalType": "uint64",
                "name": "nonce",
                "type": "uint64"
              }
            ],
            "internalType": "struct iRouterCrossTalkUpgradeable.ExecutesStruct",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "fetchFeeToken",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "fetchHandler",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "_chainID",
            "type": "uint8"
          }
        ],
        "name": "fetchLink",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "fetchLinkSetter",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "srcChainID",
            "type": "uint8"
          },
          {
            "internalType": "address",
            "name": "srcAddress",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "routerSync",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "Router Protocol",
      "kind": "dev",
      "methods": {
        "Link(uint8,address)": {
          "params": {
            "_chainID": "network Chain ID linked Contract linked to.",
            "_linkedContract": "Linked Contract address."
          }
        },
        "Unlink(uint8)": {
          "params": {
            "_chainID": "network Chain ID linked Contract linked to."
          }
        },
        "fetchLink(uint8)": {
          "params": {
            "_chainID": "Chain ID information."
          }
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}."
        }
      },
      "title": "RouterCrossTalkUpgradeable contract",
      "version": 1
    },
    "userdoc": {
      "events": {
        "CrossTalkReceive(uint8,uint8,address)": {
          "notice": "CrossTalkReceive Event is emited when a request is recived in destination side when cross chain request accepted by contract."
        },
        "CrossTalkSend(uint8,uint8,address,address,bytes4,bytes,bytes32)": {
          "notice": "CrossTalkSend Event is emited when a request is generated in soruce side when cross chain request is generated."
        },
        "Linkevent(uint8,address)": {
          "notice": "Link event is emitted when a new link is created."
        },
        "Unlinkevent(uint8,address)": {
          "notice": "UnLink event is emitted when a link is removed."
        }
      },
      "kind": "user",
      "methods": {
        "Link(uint8,address)": {
          "notice": "Link This is a public function and can only be called by Generic Handler of router infrastructureThis function links contract on other chain ID's.This is an administrative function and can only be initiated by linkSetter address."
        },
        "Unlink(uint8)": {
          "notice": "UnLink This is a public function and can only be called by Generic Handler of router infrastructureThis function unLinks contract on other chain ID's.This is an administrative function and can only be initiated by linkSetter address."
        },
        "fetchFeeToken()": {
          "notice": "fetchFeeToken This is a public function and fetches the fee token set by admin."
        },
        "fetchHandler()": {
          "notice": "fetchLinkSetter This is a public function and fetches the generic handler address."
        },
        "fetchLink(uint8)": {
          "notice": "fetchLinkSetter This is a public function and fetches the address the contract is linked to."
        },
        "fetchLinkSetter()": {
          "notice": "fetchLinkSetter This is a public function and fetches the linksetter address."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/RouterCrossTalkUpgradeable.sol": "RouterCrossTalkUpgradeable"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ]
  },
  "sources": {
    "contracts/RouterCrossTalkUpgradeable.sol": {
      "keccak256": "0x536edb3c4cbc9e53c765cb61abd4f75d64f726c8064d2460a5629c2147b6db12",
      "license": "MIT",
      "urls": [
        "bzz-raw://496147c6038f26398879531b300df943c750cc2a8eb26941efc68db25587d11d",
        "dweb:/ipfs/QmWxgwPgDuSYZ9xRoygKYMxjYHgUGxQAFu5UKTU8oQqzMg"
      ]
    },
    "contracts/interfaces/iGenericHandler.sol": {
      "keccak256": "0x97b6bbf8d0c9382781f3f1eba2b08f11432031e478a05394543f281092f0717a",
      "license": "MIT",
      "urls": [
        "bzz-raw://5e23d9aa94f1cfd36e0f3bad95336326c16e11bf8e1dddd6dc442ae3367dbd06",
        "dweb:/ipfs/QmTNUqoVPTvt96eGqhq9G2um3FgrhCfY8f5epnjpeRESUX"
      ]
    },
    "contracts/interfaces/iRouterCrossTalkUpgradeable.sol": {
      "keccak256": "0x6db1568e1fa35b8296661afac0c7981cdb428b356e4baa5b4b286ccce8d16900",
      "license": "MIT",
      "urls": [
        "bzz-raw://7f07cbf010a7183dd12d27c6379c2f6f2d9fe3847fb9490901a6c2facde3cbc0",
        "dweb:/ipfs/QmfJZxNabvKMqG7Dvgw1QLPVpqyRT4Y6RrucUo1X4cpmC4"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
      "license": "MIT",
      "urls": [
        "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
        "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol": {
      "keccak256": "0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff",
      "license": "MIT",
      "urls": [
        "bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2",
        "dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "keccak256": "0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024",
      "license": "MIT",
      "urls": [
        "bzz-raw://17a4063bc918df0f7bb9cbf04c6f0bb4977afab3f2fc212bc138a178312a221d",
        "dweb:/ipfs/QmZMdvsHP5mDEAAdrK4bNeNh47TfmSFgN9qEBFTbie7zmm"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "keccak256": "0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df",
      "license": "MIT",
      "urls": [
        "bzz-raw://e814c30d43cef5501933b775f33a6d6f06cde8aa3b7ce3773cf2256169bb6a1b",
        "dweb:/ipfs/QmWMqHGc8MHDRgrPrtVyPqsYizr8dJsyFhnmwQV6aQwPKn"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "keccak256": "0xf8313972e73a49ff9a8c2dee0b9a07a3585bc4d077bd8a9670ebdd76ff390177",
      "license": "MIT",
      "urls": [
        "bzz-raw://3fc2a0888fca21e976b4b77ca46891f547ff339a8175bc0a6461a62ce65aa89a",
        "dweb:/ipfs/QmYDpaGK98esv36MBanhjgzpS7QcisrsVMzttPknvxWhRG"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
      "license": "MIT",
      "urls": [
        "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
        "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
      "keccak256": "0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a",
      "license": "MIT",
      "urls": [
        "bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7",
        "dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
      "keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
      "license": "MIT",
      "urls": [
        "bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
        "dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
      ]
    }
  },
  "version": 1
}