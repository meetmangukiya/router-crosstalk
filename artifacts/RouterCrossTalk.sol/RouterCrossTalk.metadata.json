{
  "compiler": {
    "version": "0.8.14+commit.80d49f37"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "sourceChain",
            "type": "uint8"
          },
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "destChain",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "sourceAddress",
            "type": "address"
          }
        ],
        "name": "CrossTalkReceive",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "sourceChain",
            "type": "uint8"
          },
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "destChain",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "sourceAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "destinationAddress",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "bytes4",
            "name": "_selector",
            "type": "bytes4"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "_hash",
            "type": "bytes32"
          }
        ],
        "name": "CrossTalkSend",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "ChainID",
            "type": "uint8"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "linkedContract",
            "type": "address"
          }
        ],
        "name": "Linkevent",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint8",
            "name": "ChainID",
            "type": "uint8"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "linkedContract",
            "type": "address"
          }
        ],
        "name": "Unlinkevent",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "_chainID",
            "type": "uint8"
          },
          {
            "internalType": "address",
            "name": "_linkedContract",
            "type": "address"
          }
        ],
        "name": "Link",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "_chainID",
            "type": "uint8"
          }
        ],
        "name": "Unlink",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "hash",
            "type": "bytes32"
          }
        ],
        "name": "fetchExecutes",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint8",
                "name": "chainID",
                "type": "uint8"
              },
              {
                "internalType": "uint64",
                "name": "nonce",
                "type": "uint64"
              }
            ],
            "internalType": "struct iRouterCrossTalk.ExecutesStruct",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "fetchFeeToken",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "fetchHandler",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "_chainID",
            "type": "uint8"
          }
        ],
        "name": "fetchLink",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "fetchLinkSetter",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "srcChainID",
            "type": "uint8"
          },
          {
            "internalType": "address",
            "name": "srcAddress",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "routerSync",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "author": "Router Protocol",
      "kind": "dev",
      "methods": {
        "Link(uint8,address)": {
          "params": {
            "_chainID": "network Chain ID linked Contract linked to.",
            "_linkedContract": "Linked Contract address."
          }
        },
        "Unlink(uint8)": {
          "params": {
            "_chainID": "network Chain ID linked Contract linked to."
          }
        },
        "fetchLink(uint8)": {
          "params": {
            "_chainID": "Chain ID information."
          }
        },
        "routerSync(uint8,address,bytes)": {
          "params": {
            "data": "Data to interface on Destination side.",
            "srcAddress": "Destination ChainID.",
            "srcChainID": "Source ChainID."
          }
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}."
        }
      },
      "title": "RouterCrossTalk contract",
      "version": 1
    },
    "userdoc": {
      "events": {
        "CrossTalkReceive(uint8,uint8,address)": {
          "notice": "CrossTalkReceive Event is emited when a request is recived in destination side when cross chain request accepted by contract."
        },
        "CrossTalkSend(uint8,uint8,address,address,bytes4,bytes,bytes32)": {
          "notice": "CrossTalkSend Event is emited when a request is generated in soruce side when cross chain request is generated."
        },
        "Linkevent(uint8,address)": {
          "notice": "Link event is emitted when a new link is created."
        },
        "Unlinkevent(uint8,address)": {
          "notice": "UnLink event is emitted when a link is removed."
        }
      },
      "kind": "user",
      "methods": {
        "Link(uint8,address)": {
          "notice": "Link This is a public function and can only be called by Generic Handler of router infrastructureThis function links contract on other chain ID's.This is an administrative function and can only be initiated by linkSetter address."
        },
        "Unlink(uint8)": {
          "notice": "UnLink This is a public function and can only be called by Generic Handler of router infrastructureThis function unLinks contract on other chain ID's.This is an administrative function and can only be initiated by linkSetter address."
        },
        "fetchFeeToken()": {
          "notice": "fetchFeeToken This is a public function and fetches the fee token set by admin."
        },
        "fetchHandler()": {
          "notice": "fetchLinkSetter This is a public function and fetches the generic handler address."
        },
        "fetchLink(uint8)": {
          "notice": "fetchLinkSetter This is a public function and fetches the address the contract is linked to."
        },
        "fetchLinkSetter()": {
          "notice": "fetchLinkSetter This is a public function and fetches the linksetter address."
        },
        "routerSync(uint8,address,bytes)": {
          "notice": "routerSync This is a public function and can only be called by Generic Handler of router infrastructure"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/RouterCrossTalk.sol": "RouterCrossTalk"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ]
  },
  "sources": {
    "contracts/RouterCrossTalk.sol": {
      "keccak256": "0x9b6cf7b213c5683c98c7e5b2c706cc779204e86d824ac60744569d8af7fe7c93",
      "license": "MIT",
      "urls": [
        "bzz-raw://cdf95ae6693c806d0670ef36d8e66722d68f785dc11aebe667e7bcb7f8775f02",
        "dweb:/ipfs/QmWv4bzTb1FiTbBV9jz5GhhevvEWZjR3LNPpiPMKCA1uaw"
      ]
    },
    "contracts/interfaces/iGenericHandler.sol": {
      "keccak256": "0x97b6bbf8d0c9382781f3f1eba2b08f11432031e478a05394543f281092f0717a",
      "license": "MIT",
      "urls": [
        "bzz-raw://5e23d9aa94f1cfd36e0f3bad95336326c16e11bf8e1dddd6dc442ae3367dbd06",
        "dweb:/ipfs/QmTNUqoVPTvt96eGqhq9G2um3FgrhCfY8f5epnjpeRESUX"
      ]
    },
    "contracts/interfaces/iRouterCrossTalk.sol": {
      "keccak256": "0x4e5b4f5d64531a96beae05a9c646056d714b7519597944735c7a439445c7079b",
      "license": "MIT",
      "urls": [
        "bzz-raw://505757e2063a28de88785dbe0fb936d82ce05b3fcb41d429a8203e42ecdaa1b9",
        "dweb:/ipfs/QmTe3j1eVDXpSbf2g34sZ8VTX4xTeMU3gPji1xCCb4zXJ1"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
      "license": "MIT",
      "urls": [
        "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
        "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
      "license": "MIT",
      "urls": [
        "bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
        "dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "keccak256": "0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29",
      "license": "MIT",
      "urls": [
        "bzz-raw://11756f42121f6541a35a8339ea899ee7514cfaa2e6d740625fcc844419296aa6",
        "dweb:/ipfs/QmekMuk6BY4DAjzeXr4MSbKdgoqqsZnA8JPtuyWc6CwXHf"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0x9720545d8ea1f76222f98683f861f919e9c28bd5d5503caa7e3620a21b6aaa24",
      "license": "MIT",
      "urls": [
        "bzz-raw://fe3dac0e0258d8396c33fd27c277699a9bfac198f2cb45632c4f5df2c2ca895a",
        "dweb:/ipfs/QmfEWsX7aGpWN9wooHiQo1XjiGM1h6iXeaeMTAJ1TUcnts"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
        "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    }
  },
  "version": 1
}